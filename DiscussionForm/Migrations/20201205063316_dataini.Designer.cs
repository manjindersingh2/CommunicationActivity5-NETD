// <auto-generated />
using System;
using DiscussionForm.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiscussionForm.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20201205063316_dataini")]
    partial class dataini
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DiscussionForm.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Name = "Transport issues"
                        },
                        new
                        {
                            CategoryID = 2,
                            Name = "Senior Management"
                        },
                        new
                        {
                            CategoryID = 3,
                            Name = "Employee Benifit"
                        },
                        new
                        {
                            CategoryID = 4,
                            Name = "Others"
                        });
                });

            modelBuilder.Entity("DiscussionForm.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("PostTime");

                    b.Property<string>("PostedBy");

                    b.Property<int>("TopicId");

                    b.HasKey("CommentID");

                    b.HasIndex("TopicId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DiscussionForm.Models.Topic", b =>
                {
                    b.Property<int>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID");

                    b.Property<string>("Description");

                    b.Property<DateTime>("PostTime");

                    b.Property<string>("PostedBy");

                    b.Property<string>("Title");

                    b.HasKey("TopicID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("DiscussionForm.Models.Comment", b =>
                {
                    b.HasOne("DiscussionForm.Models.Topic", "CommentTopic")
                        .WithMany("Comments")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DiscussionForm.Models.Topic", b =>
                {
                    b.HasOne("DiscussionForm.Models.Category", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
